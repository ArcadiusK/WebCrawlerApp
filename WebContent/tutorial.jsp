<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Risk Advisor</title>
<%@  include file="./templates/includes.jsp"%></head>
<body>
	<%@  include file="./templates/header.jsp"%>
	<!-- Main part -->
	<h1>Risk Analysis</h1>

<p>Risk Advisor use Public Big Data to retrieve and analyze the "Risk Factors" for US publicly traded companies. Publicly available data sources (such as 10-K) are retrieved to create profiles for the companies and segment them based on their "risk factors" and "needs."</p>

<p>The current url is <a href="http://riskanalysis.mybluemix.net/">riskanalysis.mybluemix.net</a>.</p>

<h2>Prequisite</h2>

<p>Be sure the followings are installed successfully on your machine.</p>

<ul>
<li>Tomcat 6+</li>
<li>Java 1.5</li>
<li>Ant</li>
<li>MongoDB 2+</li>
<li>Git</li>
</ul>

<h2>Build from Source</h2>

<p>There are two places you can clone from.</p>

<ul>
<li>From GitHub</li>
</ul>

<p>This is a public project, so you can clone the repo directly.</p>

<p><pre>
cd your_workspace_path
git clone git@github.com:Gonghan/WebCrawlerApp.git
cd WebCrawlerApp
ant
</pre></p>

<ul>
<li>From Jazz Hub</li>
</ul>

<p><pre>
cd your_workspace_path
git clone https://hub.jazz.net/git/gonghan/WebCrawlerApp
cd WebCrawlerApp
ant
</pre></p>

<ul>
<li><p>Tomcat configurations</p>

<ul><li>Go to the directory of your tomcat.</li>
<li>Go to your_tomcat/conf</li>
<li>Open server.xml</li>
<li>Add this line into the <host> tag.</li></ul>

<p><pre>
&lt;Context docBase="your_workspace/WebCrawlerApp/webStarterApp.war" path="/" reloadable="true"/&gt;
</pre>
Here the <strong>webStarterApp.war</strong> is the compressed file generated by running <strong>ant</strong>. You can modify the <strong>build.xml</strong> to use a more meaningful name. Also the <strong>path="/"</strong>, otherwise you may get a bug.</p>

<p>If you find a bug about missing keywords or categories, please read the DummyServlet.java. You need to manually insert all this into the MongoDB.</p></li>
</ul>

<h2>Import into IDE</h2>

<p>I recommend <a href="http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/keplersr2">Eclipse EE</a> as the IDE for this project.</p>

<ul>
<li>Import the downloaded source code into Eclipse EE.</li>
<li>Add all the jars in the WebContent/lib/ into the project build path.</li>
<li>Strongly recommend you create a web server(tomcat) inside Eclipse and continue the tomcat configurations.</li>
</ul>

<h2>Deployment</h2>

<ul>
<li>On your own machine.
Follow the instructions above and done.</li>
<li>BlueMix
<ul><li>Create a BlueMix account</li>
<li>Log in BlueMix website and go to the dashboard.</li>
<li>Create an App and select Library for Java.</li>
<li>Enter the domain name and click 'create' button.</li>
<li>Then click the app and go to the overview page of the app.</li>
<li>Click <strong>VIEW QUICK START</strong> the top right corner.</li>
<li>Follow the instructions.</li></ul></li>
</ul>

<h2>Database</h2>

<p>Currently I use the MongoLab single-instance as the database for this project. If you have the account, just log in. You can see the detailed collections and data.</p>

<p>If you want to use a new account or create a new database. 
* Make sure the new database is accessible from the BlueMix space.
* Create a database.
* Update the constants in the MongoConstants.java.
* Manually insert all the keywords and categories into the new database.
* Read DummyServlet.java which tells you how to do that.</p>

<h2>Components</h2>

<h3>UI</h3>

<h4>index.jsp</h4>

<p>Show the basic information about this project.</p>

<h4>crawler.jsp</h4>

<p>Provide a form to crawl data or delete data.</p>

<h4>comparison.jsp</h4>

<p>Provide a comparison between the finanical risks of two companies.</p>

<h4>results.jsp</h4>

<p>Show the details financial risks of a given company.</p>

<h4>APIs.jsp</h4>

<p>Give a table of all available APIs.</p>

<h3>Model</h3>

<h4>Category</h4>

<p>Define the risk of a company in terms of categories.</p>

<p>Data structure
<pre>
{
    "Funding risks": 1,
    "Concentration on few large customers": 0,
    "Competition risks": 2,
    "Downstream risks": 0,
    "Catastrophes": 1,
    "Macroeconomic risks": 3,
}
</pre></p>

<h4>Keywords</h4>

<p>Define the keywords and frequencies of a company.
<pre>
{
    "keywords": {
        "new regulation": 1,
        "economic condition": 1,
        "emerging markets": 1,
        "foreign laws": 1,
        "intellectual property": 1,
    }
}
</pre></p>

<h4>Record</h4>

<p>Contains the raw data(riskFactor) and the year.</p>

<p><pre>
{
    "records": [
        {
            "companyName": null,
            "year": "2013",
            "riskFactor": "item 1a. risk factors:         downturn  spending budgets could impact the ......",
            "symbol": "IBM",
            "keywords": {
                "new regulation": 1,
                "economic condition": 1,
                "emerging markets": 1
            }
        }
    ]
}
</pre></p>

<h3>API</h3>

<p>I use <a href="https://jersey.java.net/">Jersey</a> to build the restful APIs.</p>

<p>This is a sample about the API resource. You can find this code snippet in the edu.cmu.sv.webcrawler.apis.ResultsResource.java</p>

<p><pre>
@Path("/results")
public class ResultsResource {
</pre>
@Path provides a relative URI path.</p>

<p><pre>
@GET
    @Path("/{param}")
    @Produces(MediaType.APPLICATION_JSON)
    public Records getResult(@PathParam("param") String symbol,
            @QueryParam("year") String year) {
        Records records = new Records();
        List&lt;Record&gt; list = null;
        if (year == null || year.isEmpty()) {
            list = Record.search(symbol);
        } else {
            list = Record.search(symbol, year);
        }
        records.setRecords(list);
        return records;
    }
</pre>
This function gets one param as the symbol and a query string as the year. A sample url which will redirect to this function:</p>

<p><pre>
api/results/IBM?year=2013
</pre>
The return format is JSON. You don't need to create a JSON object manually. What you need to do is to define the data format in the models package.</p>

<h3>Servlet</h3>

<p>All servlets are in the edu.cmu.sv.webcrawler.servlets package. In fact, I use them for very limited functions. It's a good practice to build API layer and UI layer independently. Then use JavaScript to connect them together. In the next steps, I will remove all servlets and build more APIs instead.</p>
	
	<!-- <a href="./dummy">dummy link</a> -->
	<%@  include file="./templates/footer.jsp"%>
</body>
</html>